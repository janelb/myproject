<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:P="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--scope表示创建的是否是单例 默认为单例（singleton）  prototype表示不是单例-->
    <!-- lazy-init 为true是表示调用该方法时创建对象 false默认启动时创建对象 默认为false-->

    <!--    <bean id="userDao" class="com.libang.dao.UserDao" lazy-init="true" destroy-method="destory" init-method="init"/>-->

<!--=================================注入方法=======================================================-->
    <!--当bean有很多依赖时，构造方法的参数列表会很长。
        如果对象有多个构造方法，那么构造方法的代码量会增加
        如果构造方法有两个以上参数类型相同时，将很难确定参数的用途-->

    <bean id="userDao" class="com.libang.dao.UserDao"/>

    <!--使用set方法注入第一种类型，常用方法-->
    <bean id="userService" class="com.libang.service.UserService">
        <!--name属性为：被注入对象setter方法名去掉set首字母变小写，ref属性是：注入对象的id名-->
        <property name="userDao" ref="userDao"/>
    </bean>

    <!--第二种类型-->
   <!-- <bean id="userService" class="com.libang.service.UserService">
        <property name="userDao">
            <ref bean="userDao"/>
        </property>
    </bean>-->

    <!--第三种类型-->
    <!--此方法可以不用单独把注入对象放入容器中，可以自己创建，但是是局部的，不推荐使用-->
    <!--   <bean id="userService" class="com.libang.service.UserService">
        <property name="userDao">
           <bean class="com.libang.dao.UserDao"/>
        </property>
    </bean>-->

    <!--第三种类型-->
     <!--  <bean id="userService" class="com.libang.service.UserService"  p:userDao-ref="userDao"/>-->




    <!--===================构造器注入==========================-->
    <!--使用强依赖规定，如果不给足够的参数对象无法创建
    bean依赖通过构造方法设置，就不用写更多的set方法，减少代码量    -->
    <!--<bean id="userDao" class="com.libang.dao.UserDao"/>-->

    <!--第一种-->
    <!--<bean id="userService" class="com.libang.service.UserService">
        &lt;!&ndash;name属性是构造方法的参数的名称   ref是注入对象的id&ndash;&gt;
        <constructor-arg name="userDao" ref="userDao"/>
    </bean>-->


    <!--第二种-->
  <!--  <bean id="userService" class="com.libang.service.UserService">
        &lt;!&ndash;index:构造方法参数的位置索引  ref是注入对象的id&ndash;&gt;
        <constructor-arg index="0" ref="userDao"/>
    </bean>
-->

    <!--第三种-->
  <!--  <bean id="userService" class="com.libang.service.UserService">
        &lt;!&ndash; type:构造方法参数的类型  ref是注入对象的id&ndash;&gt;
        <constructor-arg type="com.libang.dao.UserDao" ref="userDao"/>
    </bean>
-->



<!--===========================自动注入基于set注入=====================================================-->

    <!--no 默认值，不进行自动注入
        • byName 根据需要注入的属性名在容器内寻找名称相同的Bean，如果找到就注入，找不到就不注入
        • byType 根据需要注入的属性类型在容器找类型相同的Bean，如果找到就注入，找不到就不注入，如果
        找到多个类型相同的Bean，则抛出异常
        • constructor 类似byType注入，但是使用在构造方法之上
        • 其中byName和byType方式都是基于set注入方式进行的-->

    <!-- <bean id="userService" class="com.libang.service.UserService" autowire="byType"/>-->

    <!--========================基本数据类型及集合的注入=====================================-->

         <!--   <bean id="baseService" class="com.libang.service.BaseService">
                    <property name="id" value="123"/>
                    <property name="name" value="tom"/>
                    <property name="score" value="90.90"/>


                <property name="stringList" >
                    <list>
                        <value>abc</value>
                        <value>123</value>
                        <value>xvf</value>
                    </list>
                </property>

                <property name="numSets">
                    <set>
                        <value>123</value>
                        <value>456</value>
                    </set>
                </property>

                <property name="maps">
                    <map>
                        <entry key="name" value="jack"/>
                        <entry key="addr" value="郑州"/>
                    </map>
                </property>

                <property name="properties">
                    <props>
                        <prop key="driver">com.mysql.jdbc.Driver</prop>
                        <prop key="username">root</prop>
                    </props>

                </property>

            </bean>

-->





</beans>